From: Mike Hommey <glandium@debian.org>
Date: Thu, 17 Nov 2011 08:52:05 +0100
Subject: Use C99 int types instead of NSPR ones

Closes: #631033
---
 plugin/gtk-vnc-plugin.c |    2 +-
 plugin/gtk-vnc-plugin.h |    8 ++++----
 plugin/npshell.c        |   19 ++++++++++---------
 plugin/npunix.c         |   10 +++++-----
 4 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/plugin/gtk-vnc-plugin.c b/plugin/gtk-vnc-plugin.c
index 1147a95..0aaf7c4 100644
--- a/plugin/gtk-vnc-plugin.c
+++ b/plugin/gtk-vnc-plugin.c
@@ -275,7 +275,7 @@ GtkVNCDestroyWindow (NPP instance)
 
 static NPWindow windowlessWindow;
 
-int16
+int16_t
 GtkVNCXHandleEvent(NPP instance, void *event)
 {
     XGraphicsExposeEvent exposeEvent;
diff --git a/plugin/gtk-vnc-plugin.h b/plugin/gtk-vnc-plugin.h
index 4bf403e..0978fdb 100644
--- a/plugin/gtk-vnc-plugin.h
+++ b/plugin/gtk-vnc-plugin.h
@@ -45,10 +45,10 @@
 #define PLUGIN_DESCRIPTION  "VNC (remote desktop) viewer plugin"
 
 typedef struct {
-    uint16 mode;
+    uint16_t mode;
     NPWindow *window;
-    int32 x, y;
-    uint32 width, height;
+    int32_t x, y;
+    uint32_t width, height;
 
     NPP instance;
     NPBool pluginsHidden;
@@ -61,7 +61,7 @@ typedef struct {
 
 extern NPError GtkVNCXSetWindow (NPP instance, NPWindow* window);
 extern NPError GtkVNCDestroyWindow (NPP instance);
-extern int16 GtkVNCXHandleEvent (NPP instance, void* event);
+extern int16_t GtkVNCXHandleEvent (NPP instance, void* event);
 
 #ifdef ENABLE_DEBUG
 static inline void
diff --git a/plugin/npshell.c b/plugin/npshell.c
index df01b2e..ca4e78b 100644
--- a/plugin/npshell.c
+++ b/plugin/npshell.c
@@ -79,6 +79,7 @@
 
 #include <stdio.h>
 #include <string.h>
+#include <stdlib.h>
 
 #include <npapi.h>
 
@@ -111,7 +112,7 @@ NPP_GetValue(NPP instance G_GNUC_UNUSED, NPPVariable variable, void *value)
     *((const char **)value) = PLUGIN_DESCRIPTION;
     break;
   case NPPVpluginNeedsXEmbed:
-    *((PRBool *)value) = PR_TRUE;
+    *((NPBool *)value) = true;
     break;
   default:
     err = NPERR_GENERIC_ERROR;
@@ -146,15 +147,15 @@ NPP_Shutdown(void)
 NPError
 NPP_New(NPMIMEType pluginType G_GNUC_UNUSED,
         NPP instance,
-        uint16 mode,
-        int16 argc,
+        uint16_t mode,
+        int16_t argc,
         char* argn[],
         char* argv[],
         NPSavedData *saved G_GNUC_UNUSED)
 {
   PluginInstance *This;
   NPError err = NPERR_NO_ERROR;
-  PRBool supportsXEmbed = PR_FALSE;
+  NPBool supportsXEmbed = false;
   NPNToolkitType toolkit = 0;
   int i;
   char *key, *value;
@@ -170,7 +171,7 @@ NPP_New(NPMIMEType pluginType G_GNUC_UNUSED,
   err = NPN_GetValue (instance,
                       NPNVSupportsXEmbedBool,
                       (void *)&supportsXEmbed);
-  if (err != NPERR_NO_ERROR || supportsXEmbed != PR_TRUE)
+  if (err != NPERR_NO_ERROR || supportsXEmbed != true)
     return NPERR_INCOMPATIBLE_VERSION_ERROR;
 
 #if 1
@@ -244,7 +245,7 @@ NPP_SetWindow(NPP instance, NPWindow* window)
   return GtkVNCXSetWindow(instance, window);
 }
 
-int32
+int32_t
 NPP_WriteReady(NPP instance, NPStream *stream)
 {
   /*printf("NPP_WriteReady()\n");*/
@@ -258,9 +259,9 @@ NPP_WriteReady(NPP instance, NPStream *stream)
   return -1L;   /* don't accept any bytes in NPP_Write() */
 }
 
-int32
+int32_t
 NPP_Write(NPP instance, NPStream *stream,
-          int32 offset G_GNUC_UNUSED, int32 len G_GNUC_UNUSED,
+          int32_t offset G_GNUC_UNUSED, int32_t len G_GNUC_UNUSED,
           void *buffer G_GNUC_UNUSED)
 {
   /*printf("NPP_Write()\n");*/
@@ -377,7 +378,7 @@ NPP_Print(NPP instance, NPPrint* printInfo)
   }
 }
 
-int16 NPP_HandleEvent(NPP instance, void* event)
+int16_t NPP_HandleEvent(NPP instance, void* event)
 {
   /*printf("NPP_HandleEvent()\n");*/
 
diff --git a/plugin/npunix.c b/plugin/npunix.c
index 05eff4e..83ac628 100644
--- a/plugin/npunix.c
+++ b/plugin/npunix.c
@@ -305,7 +305,7 @@ NPN_NewStream(NPP instance, NPMIMEType type, const char *window,
                                  type, window, stream_ptr);
 }
 
-int32
+int32_t
 NPN_Write(NPP instance, NPStream* stream, int32_t len, void* buffer)
 {
     return CallNPN_WriteProc(gNetscapeFuncs.write, instance,
@@ -439,7 +439,7 @@ Private_SetWindow(NPP instance, NPWindow* window)
 static NPError
 Private_NewStream(NPP instance G_GNUC_UNUSED, NPMIMEType type G_GNUC_UNUSED,
                   NPStream* stream G_GNUC_UNUSED,
-                  NPBool seekable G_GNUC_UNUSED, uint16* stype G_GNUC_UNUSED)
+                  NPBool seekable G_GNUC_UNUSED, uint16_t* stype G_GNUC_UNUSED)
 {
     NPError err = NPERR_NO_ERROR;
     PLUGINDEBUGSTR("NewStream");
@@ -447,7 +447,7 @@ Private_NewStream(NPP instance G_GNUC_UNUSED, NPMIMEType type G_GNUC_UNUSED,
     return err;
 }
 
-static int32
+static int32_t
 Private_WriteReady(NPP instance, NPStream* stream)
 {
     unsigned int result;
@@ -456,7 +456,7 @@ Private_WriteReady(NPP instance, NPStream* stream)
     return result;
 }
 
-static int32
+static int32_t
 Private_Write(NPP instance, NPStream* stream, int32_t offset, int32_t len,
               void* buffer)
 {
@@ -519,7 +519,7 @@ Private_GetJavaClass(void)
 }
 #endif
 
-static int16
+static int16_t
 Private_HandleEvent(NPP instance, void* event)
 {
     return NPP_HandleEvent(instance, event);
